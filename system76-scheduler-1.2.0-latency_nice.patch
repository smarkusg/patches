diff --color -rupN a/daemon/src/main.rs b/daemon/src/main.rs
--- a/daemon/src/main.rs	2022-05-19 23:02:23.000000000 +0200
+++ b/daemon/src/main.rs	2022-06-09 10:34:29.038123571 +0200
@@ -194,6 +194,7 @@ async fn daemon(connection: Connection,
             }
 
             Event::SetForegroundProcess(pid) => {
+                tracing::info!("setting foreground process {}", pid);
                 priority_service.set_foreground_process(pid);
             }
 
diff --color -rupN a/daemon/src/nice.rs b/daemon/src/nice.rs
--- a/daemon/src/nice.rs	2022-05-19 23:02:23.000000000 +0200
+++ b/daemon/src/nice.rs	2022-06-09 10:47:27.294644556 +0200
@@ -4,10 +4,63 @@
 use concat_in_place::strcat;
 use ioprio::{Pid, Target};
 
+#[repr(C)]
+#[derive(Debug, Default)]
+#[cfg(target_os = "linux")]
+pub struct SchedAttr {
+    size: u32,
+    sched_policy: u32,
+    sched_flags: u64,
+
+    /// for SCHED_NORMAL and SCHED_BATCH
+    sched_nice: i32,
+    /// for SCHED_FIFO, SCHED_RR
+    sched_priority: u32,
+
+    /// for SCHED_DEADLINE
+    sched_runtime: u64,
+    /// for SCHED_DEADLINE
+    sched_deadline: u64,
+    /// for SCHED_DEADLINE
+    sched_period: u64,
+
+    /// Utilization hint
+    sched_util_min: u32,
+    /// Utilization hint
+    sched_util_max: u32,
+   /// Latency nice 
+    sched_latency_nice: i32,
+}
+pub fn set_latency_nice(process: u32, prio: i32) {
+
+    pub const SCHED_FLAG_LATENCY_NICE: u64 = 0x80;
+    let tid = process as libc::pid_t;
+
+    unsafe {        
+        let mut sched_attr = SchedAttr::default();
+        let ret = libc::syscall(
+                libc::SYS_sched_getattr,
+                tid,
+                &mut sched_attr as *mut _,
+		std::mem::size_of::<SchedAttr>() as u32,
+                0,);
+                
+         if ret == 0   {
+               sched_attr.sched_flags = SCHED_FLAG_LATENCY_NICE;
+	       sched_attr.sched_latency_nice = prio;
+		    libc::syscall(
+                    libc::SYS_sched_setattr,
+                    tid,
+                    &sched_attr as *const _,
+                    0,);
+            	      }
+	  }     
+} 
+
+
 pub fn set_priority(process: u32, priority: (i32, ioprio::Priority)) {
     let mut buffer = itoa::Buffer::new();
     let tasks = strcat!("/proc/" buffer.format(process) "/task");
-
     if let Ok(tasks) = std::fs::read_dir(tasks) {
         for task in tasks.filter_map(Result::ok) {
             if let Some(process) = task
diff --color -rupN a/daemon/src/priority.rs b/daemon/src/priority.rs
--- a/daemon/src/priority.rs	2022-05-19 23:02:23.000000000 +0200
+++ b/daemon/src/priority.rs	2022-06-09 10:46:14.552554095 +0200
@@ -46,6 +46,7 @@ impl Service {
     pub fn assign(&self, pid: u32, default: (i32, IoPriority)) -> AssignmentStatus {
         if let Some(priority) = self.assigned_priority(pid).with_default(default) {
             crate::nice::set_priority(pid, priority);
+            crate::nice::set_latency_nice(pid, priority.0);
             return AssignmentStatus::Assigned;
         }
 
@@ -114,6 +115,8 @@ impl Service {
                 let class = ioprio::Class::BestEffort(level);
                 let io_priority = ioprio::Priority::new(class);
                 crate::nice::set_priority(pid, (0, io_priority));
+                crate::nice::set_latency_nice(pid, (0, io_priority).0);
+
             }
 
             return;
@@ -158,6 +161,7 @@ impl Service {
                     .with_default(background_priority)
                 {
                     crate::nice::set_priority(process, priority);
+                    crate::nice::set_latency_nice(process, priority.0);
                 }
             }
 
@@ -168,6 +172,7 @@ impl Service {
                 .with_default(foreground_priority)
             {
                 crate::nice::set_priority(pid, priority);
+                crate::nice::set_latency_nice(pid, priority.0);
                 self.foreground_processes.push(pid);
             }
 
@@ -182,6 +187,7 @@ impl Service {
                                 .with_default(foreground_priority)
                             {
                                 crate::nice::set_priority(*pid, priority);
+	                        crate::nice::set_latency_nice(*pid, priority.0);
                                 self.foreground_processes.push(*pid);
                                 continue 'outer;
                             }
@@ -210,6 +216,7 @@ impl Service {
                     .with_default((i32::from(background), IoPriority::Idle))
                 {
                     crate::nice::set_priority(pid, priority);
+                    crate::nice::set_latency_nice(pid, priority.0);
                 }
             }
         }
